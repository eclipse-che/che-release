name: Update base images
on:
  workflow_dispatch:
    inputs:
      repos:
        description: 'List of repos to check for updates, comma-separated'
        required: true
        default: '
        che-dockerfiles/che-backup-server-rest, 
        che-incubator/chectl, 
        che-incubator/configbump, 
        che-incubator/jetbrains-editor-images, 
        che-incubator/kubernetes-image-puller, 
        che-incubator/kubernetes-image-puller-operator, 
        che-incubator/workspace-data-sync, 
        devfile/devworkspace-operator, 
        eclipse-che/che-dashboard, 
        eclipse-che/che-devfile-registry, 
        eclipse-che/che-machine-exec, 
        eclipse-che/che-operator, 
        eclipse-che/che-plugin-registry, 
        eclipse-che/che-server, 
        eclipse-che/che-theia, 
        eclipse/che
        '
  schedule:
  - cron: "0 0 * * 6"

jobs:
  build:
    name: Check
    runs-on: ubuntu-20.04
    strategy: 
      fail-fast: false
      matrix: 
        projects:
          - { repo: "che-dockerfiles/che-backup-server-rest", user: "CHE_INCUBATOR_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "che-incubator/chectl", user: "CHE_INCUBATOR_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "che-incubator/configbump", user: "CHE_INCUBATOR_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "che-incubator/jetbrains-editor-images", user: "CHE_INCUBATOR_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "che-incubator/kubernetes-image-puller", user: "CHE_INCUBATOR_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "che-incubator/kubernetes-image-puller-operator", user: "CHE_INCUBATOR_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b master -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "che-incubator/workspace-data-sync", user: "CHE_INCUBATOR_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "devfile/devworkspace-operator", user: "CHE_INCUBATOR_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "eclipse-che/che-dashboard", user: "CHE_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "eclipse-che/che-devfile-registry", user: "CHE_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "eclipse-che/che-machine-exec", user: "CHE_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "eclipse-che/che-operator", user: "CHE_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 1 -f *Dockerfile --pr" }
          - { repo: "eclipse-che/che-plugin-registry", user: "CHE_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "eclipse-che/che-server", user: "CHE_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
          - { repo: "eclipse-che/che-theia", user: "CHE_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 5 -f *[dD]ockerfile --pr" }
          - { repo: "eclipse/che", user: "CHE_BOT_GITHUB_TOKEN", command: "/tmp/updateBaseImages.sh -b main -maxdepth 3 -f *Dockerfile --pr" }
    steps:
      - name: Set defaults (for use in crontab or workflow_dispatch) and check if we have a matching repo value 
        id: SETUP_REPOS
        shell: bash
        env:
          DEFAULT_REPOS: '
          che-dockerfiles/che-backup-server-rest, 
          che-incubator/chectl, 
          che-incubator/configbump, 
          che-incubator/jetbrains-editor-images, 
          che-incubator/kubernetes-image-puller, 
          che-incubator/kubernetes-image-puller-operator, 
          che-incubator/workspace-data-sync, 
          devfile/devworkspace-operator, 
          eclipse-che/che-dashboard, 
          eclipse-che/che-devfile-registry, 
          eclipse-che/che-machine-exec, 
          eclipse-che/che-operator, 
          eclipse-che/che-plugin-registry, 
          eclipse-che/che-server, 
          eclipse-che/che-theia, 
          eclipse/che
          '
        run: |
            echo "REPOS=${{ github.event.inputs.repos || env.DEFAULT_REPOS }}" >> $GITHUB_ENV
            echo ::set-output name=GOT_REPO::false
            for r in $(echo ${{ github.event.inputs.repos || env.DEFAULT_REPOS }} | tr "," "\n"); do
              if [[ $r == "${{ matrix.projects.repo }}" ]]; then
                echo ::set-output name=GOT_REPO::true
                break
              fi
            done
      - name: "Checkout source code"
        if: steps.SETUP_REPOS.outputs.GOT_REPO == 'true'
        uses: actions/checkout@v2
        with:
          repository: ${{ matrix.projects.repo }}
          token: ${{ secrets[matrix.projects.user] }}
          fetch-depth: 0
      - name: Login to registry.redhat.io 
        if: steps.SETUP_REPOS.outputs.GOT_REPO == 'true'
        uses: docker/login-action@v1
        with:
          registry: registry.redhat.io
          username: ${{ secrets.CRW_BUILD_USER }}
          password: ${{ secrets.CRW_BUILD_TOKEN }}
      - name: Init
        if: steps.SETUP_REPOS.outputs.GOT_REPO == 'true'
        run: |
          checkVersion() {
            if [[  "$1" = "$(echo -e "$1\n$2" | sort -V | head -n1)" ]]; then
              # echo "[INFO] $3 version $2 >= $1, can proceed."
              true
            else
              echo "[INFO] Installing $3 version >= $1 ..."
              if [[ "$3" == "yq" ]]; then
                pip install "$3"
              else
                sudo apt-get -y install "$3"
              fi
            fi
          }
          repos=$(echo ${{ env.REPOS }} | tr "," "\n")
          for r in $repos; do
            if [[ $r == "${{ matrix.projects.repo }}" ]]; then
              # Install skopeo + yq
              checkVersion 1.1 "$(skopeo --version | sed -e "s/skopeo version //")" skopeo
              checkVersion 2.0 "$(yq --version | sed -e "s/yq //")" yq
              pushd /tmp >/dev/null || exit 1
              curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/crw-2-rhel-8/product/updateBaseImages.sh
              chmod +x updateBaseImages.sh
              popd >/dev/null || exit 1
              export GITHUB_TOKEN=${{ secrets[matrix.projects.user] }}
              git config --global user.name "Mykhailo Kuznietsov"
              git config --global user.email "mkuznets@redhat.com"
              echo "running job for ${{ matrix.projects.repo }}"
              mkdir -p /tmp/${{ matrix.projects.repo }}
              ${{ matrix.projects.command }} | tee /tmp/${{ matrix.projects.repo }}/log.txt
              break
            fi
          done
          if [[ ! -d /tmp/${{ matrix.projects.repo }} ]]; then 
            echo "SKIP running job for ${{ matrix.projects.repo }} - not included in $repos"
          fi
      - name: PR link
        id: SETUP_PR_LINK
        shell: bash
        run: |
            echo ::set-output name=GOT_PR::false
            if [[ -f /tmp/${{ matrix.projects.repo }}/log.txt ]]; then
              URL=$(grep "${{ matrix.projects.repo }}/pull/" /tmp/${{ matrix.projects.repo }}/log.txt 2>/dev/null || true)
              if [[ $URL ]]; then 
                echo "$URL"
                echo "PR_URL=\"$URL\"" >> $GITHUB_ENV
                echo ::set-output name=GOT_PR::true
              fi
            fi
      - name: Create MM message
        if: steps.SETUP_PR_LINK.outputs.GOT_PR == 'true'
        run: |
          echo "{\"text\":\":octocat: Base image update for [${{ matrix.projects.repo }}](${{ env.PR_URL }})\"}" > mattermost.json
      - name: Send MM message
        if: steps.SETUP_PR_LINK.outputs.GOT_PR == 'true'
        uses: mattermost/action-mattermost-notify@1.1.0
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MATTERMOST_CHANNEL: eclipse-che-ci
          MATTERMOST_USERNAME: che-bot
